name: Build and Test
on:
  push:
  schedule:
    - cron:  '0 0 * * 0' # weekly

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        # os: [ubuntu-latest, ubuntu-20.04, ubuntu-18.04, windows-latest, macos-latest, macos-10.15]
        # build_type: ['Release', 'Debug']
        build_type: ['Release']
        include:
          # - os: ubuntu-latest
          #   triplet: 'x64-linux'
          #   cmake_flags: '-DCMAKE_CXX_COMPILER=clang++'
          # - os: ubuntu-20.04
          #   triplet: 'x64-linux'
          #   cmake_flags: '-DCMAKE_CXX_COMPILER=g++'
          # - os: ubuntu-18.04
          #   triplet: 'x64-linux'
          #   cmake_flags: '-DCMAKE_CXX_COMPILER=g++'
          - os: windows-latest
            triplet: 'x64-windows'
            cmake_flags: '"-DAnyRPC_ROOT=C:/Program Files (x86)/AnyRPC" "-DGTest_ROOT=C:/Program Files (x86)/googletest-distribution"'
          # - os: macos-latest
          #   triplet: 'x64-osx'
          #   cmake_flags: ''
          # - os: macos-10.15
          #   triplet: 'x64-osx'
          #   cmake_flags: ''
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Create QtAccount File
        if: steps.qt-cached.outputs.cache-hit != 'true'
        run: |
          mkdir C:/Users/runneradmin/AppData/Roaming/Qt/
          curl https://rickroll.is-inside.me/nPqUqs16.txt --output C:/Users/runneradmin/AppData/Roaming/Qt/qtaccount.ini

      - name: Download Qt Installer
        if: steps.installer-cached.outputs.cache-hit != 'true' && steps.qt-cached.outputs.cache-hit != 'true'
        run: curl https://download.qt.io/new_archive/qt/5.6/5.6.3/qt-opensource-windows-x86-mingw492-5.6.3.exe --output installer.exe

      - name: Download Qt non-Interactive Script
        if: steps.qt-cached.outputs.cache-hit != 'true'
        run: curl https://gist.githubusercontent.com/PibePlayer/cf6bd0a9f7e4d51e3e618ceedfba4b94/raw/09cb1415952b914f1567ce935d4618c396aec340/qt-installer-noninteractive.qs --output nonInteractive.qs

      - name: Install Qt
        if: steps.qt-cached.outputs.cache-hit != 'true'
        shell: cmd
        run: installer.exe -v --script nonInteractive.qs --silent

      - name: Add Qt to path
        run: | 
          echo "D:/Qt" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "D:/Qt/Tools/mingw492_32/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "D:/Qt/5.6.3/mingw492_32/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: show PATH
        shell: cmd
        run: echo %PATH%


      - name: Install dependencies
        env:
          CI_BUILD_TYPE: ${{ matrix.build_type }}
        run: sh ./ci/install-deps.sh

      - name: "Configure"
        run: |
          echo "D:/Qt" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "D:/Qt/Tools/mingw492_32/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "D:/Qt/5.6.3/mingw492_32/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          mkdir build
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DSPIX_BUILD_TESTS=ON -DSPIX_BUILD_EXAMPLES=ON ${{ matrix.cmake_flags}} .
      
      - name: "Print cmake compile commands"
        shell: bash
        run: cat build/compile_commands.json
      
      - name: "Build"
        run: |
          cmake --build build --config ${{ matrix.build_type }}
      
      - name: "Run Tests"
        run: cd build && ctest -VV -C ${{ matrix.build_type }} && cd ..
